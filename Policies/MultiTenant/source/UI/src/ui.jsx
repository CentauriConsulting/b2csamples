/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import React, { useState, TextInput } from "react";

import axios from 'axios';

import { AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from "@azure/msal-react";

import { Navbar, Button, Dropdown, DropdownButton} from "react-bootstrap";

import { loginRequest, b2cPolicies, deployment } from "./authConfig";

const NavigationBar = () => {

    /**
     * useMsal is hook that returns the PublicClientApplication instance, 
     * an array of all accounts currently signed in and an inProgress value 
     * that tells you what msal is currently doing. For more, visit:
     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md
     */
    const { instance } = useMsal();

    return (
        <>
            <AuthenticatedTemplate>
                <div className="ml-auto">
                    <SwitchTenant/>
                </div>                  
                <div className="ml-auto">
                    <DropdownButton variant="warning" className="ml-auto" drop="left" title="Sign Out">
                        <Dropdown.Item as="button" onClick={() => instance.logoutPopup({ postLogoutRedirectUri: "/", mainWindowRedirectUri: "/" })}>Sign out using Popup</Dropdown.Item>
                        <Dropdown.Item as="button" onClick={() => instance.logoutRedirect({ postLogoutRedirectUri: "/" })}>Sign out using Redirect</Dropdown.Item>
                    </DropdownButton>
                </div>
            </AuthenticatedTemplate>
            <UnauthenticatedTemplate>
                <div className="ml-auto">
                    <Button variant="warning" className="ml-auto" drop="left" onClick={() => 
                        instance.loginRedirect({ 
                            authority:b2cPolicies.authorities.newTenant.authority
                        })
                    }>Create new tenant</Button>
                </div>   
                <div className="ml-auto">                         
                    <Button variant="warning" className="ml-auto" onClick={() => instance.loginRedirect(loginRequest)}>Sign in</Button>  
                </div>   
                {/*              
                <DropdownButton variant="secondary" className="ml-auto" drop="left" title="Sign In">
                    <Dropdown.Item as="button" onClick={() => instance.loginPopup(loginRequest)}>Sign in using Popup</Dropdown.Item>
                    <Dropdown.Item as="button" onClick={() => instance.loginRedirect(loginRequest)}>Sign in using Redirect</Dropdown.Item>
                </DropdownButton>
                */}
            </UnauthenticatedTemplate>
        </>
    );
};

export const PageLayout = (props) => {
    return (
        <>
            <Navbar bg="primary" variant="dark">
                <a className="navbar-brand" href="/">B2C multi-tenant identities</a>
                <NavigationBar />
            </Navbar>
            <br />
            <h5><center>Welcome to the B2C multi-tenant sample</center></h5>
            <br />
            {props.children}
            <br />
            <AuthenticatedTemplate>
                <footer>
                    <center> 
                        <a href="https://github.com/mrochon/b2csamples/tree/master/Policies/MultiTenant" target="_blank"> Source</a>
                    </center>
                </footer> 
            </AuthenticatedTemplate>
            <UnauthenticatedTemplate>
                <div>
                    <h2>Using a single Azure AD B2C directory as identity service for a multi-tenant SaaS application.</h2>
                    <p><i>Particularly appropriate for SaaS applications intended for small (2-dozen employees) organizations.</i></p>
                    <p>
                        A SaaS application commonly uses the concept of a <b>tenant</b> to group users whose from different organizations using the software. For example, a SaaS application may provide accounting
                        services. Each business using the application is considered a tenant in the application. Since Azure AD itself is a SaaS application, to distinguish such an AAD tenant
                        from tenants exposed in this sample, this application uses the term <b>application tenant</b>. 
                    </p>
                    <p>
                        In this sample an individual can either <a href="~/home/newtenant">create</a> a new application tenant or <a href="/home/membersignin">
                        sign in</a> to an existing tenant they are a member of. Once a tenant is created, it's creator (admin)
                        can invite other users by sending them an invitation generated by this application to their email address. (That functionality is
                        exposed only to creators of new tenants). Tenants created by users using AAD (Work or school address)
                        can flag their tenant as allowing any other user from the same directory to join the tenant without invitation.
                        In that case, user access to the tenant is controlled through the enterprise Applications
                        tab in the directory portal. These user will not show up as members of the tenant in this application. Other user
                        may still be invited to this tenant. To sign-in to the app, the AAD users need to use the domain=commonaad and tenant=tenantName url parameters.
                    </p>
                    <p>
                    Once signed up, a user may sign-in again by appending <i>?p=tenantName</i> parameter to the app url. Otherwise (if there is no such
                        parameter), B2C will pick the first tenant the user is a member of or refuse sign in altogether.
                    </p>
                    <p>Source code for this app may be <a href="https://github.com/mrochon/b2csamples/policies/multitenant">found on github.</a></p>
                    <p>For more info <a href="mailto:sailingrock@live.com">email me</a> or use the github source repo comments area.</p>                    
                </div>
            </UnauthenticatedTemplate>
        </>
    );
};

export const IdTokenClaims = (props) => {  
    return (
        <div id="token-div">
            <p><strong>Audience: </strong> {props.idTokenClaims.aud}</p>
            <p><strong>Issuer: </strong> {props.idTokenClaims.iss}</p>
            <p><strong>OID: </strong> {props.idTokenClaims.oid}</p>
            <p><strong>UPN: </strong> {props.idTokenClaims.preferred_username}</p>
            <p><strong>App tenant: </strong> {props.idTokenClaims.appTenantName}</p>
            <p><strong>App tenant id: </strong> {props.idTokenClaims.appTenantId}</p>
            <p><strong>Roles: </strong> {props.idTokenClaims.roles}</p>
        </div>
    );
}

export const SwitchTenant = () => {
    const { accounts, instance } = useMsal();    

    const listTenants = accounts[0].idTokenClaims.allTenants.filter(currTenant).map((tenant, ix) =>
        <Dropdown.Item as="button" key={ix} onClick={() => 
                instance.loginRedirect({ 
                    authority:b2cPolicies.authorities.signIn.authority,
                    account: accounts[0],
                    /*prompt: "login",*/
                    extraQueryParameters: { tenant: tenant }
                })
            }>{tenant}</Dropdown.Item>
    );
    function currTenant(tenant) {
        return (tenant !== accounts[0].idTokenClaims.appTenantName);
    }
    if(accounts[0].idTokenClaims.allTenants.length > 1) {
        var title = `Current: ${accounts[0].idTokenClaims.appTenantName}`
        return (
                <DropdownButton variant="warning" className="ml-auto" drop="left" title={title}>{listTenants}</DropdownButton>
    )} else return null;
};

export const InviteMember = () => {
    const [email, setEmail] = useState("abc@example.com");
    const [invitation, setInvitation] = useState(null);
    const { instance, accounts } = useMsal();    
    return (
        <div>
            <h5 className="card-title">Invitation</h5>
            <div>
                <div><p><i>Enter email address</i></p></div>                
                <div><input type="text" value={email} onChange={(e) => setEmail(e.target.value)}/></div>
                <div><Button onClick={() => 
                    {
                        console.log('starting click' + email);
                        setEmail(email);
                        instance.acquireTokenSilent({ 
                            authority:b2cPolicies.authorities.signIn.authority,
                            scopes: ["openid", "profile", "https://mrochonb2cprod.onmicrosoft.com/mtrest/User.Invite", "https://mrochonb2cprod.onmicrosoft.com/mtrest/User.ReadAll"],
                            account: accounts[0]
                        }).then(function(accessTokenResponse) {
                            console.log("Email:"+email);
                            let accessToken = accessTokenResponse.accessToken;
                            axios.post(
                                'https://mrmtrestapi.azurewebsites.net/tenant/oauth2/invite',
                                { inviteEmail: email, clientId: deployment.invitation.appId, replyUrl: deployment.invitation.replyUrl },
                                { headers: { 'Authorization': `Bearer ${accessToken}`} }
                              ).then(response => { setInvitation(response.data); console.log("invite received");})
                              .catch(error => console.log(error));
                        }).catch(function (error) {
                            if (error instanceof InteractionRequiredAuthError) {
                                instance.acquireTokenPopup(accessTokenRequest).then(function(accessTokenResponse) {
                                    let accessToken = accessTokenResponse.accessToken;
                                    callApi(accessToken);
                                }).catch(function(error) {
                                    console.log(error);
                                });
                            }
                            console.log(error);
                        });
                    }}>Invite</Button></div>
                {invitation?
                    <div><input type="text" value={invitation}/></div> 
                    :
                    <p/>
                }       
            </div>
         </div>
    );
};


